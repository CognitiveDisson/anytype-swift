// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/changes.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// the element of change tree used to store and internal apply smartBlock history
public struct Anytype_Change {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ids of previous changes
  public var previousIds: [String] = []

  /// id of the last snapshot
  public var lastSnapshotID: String = String()

  /// ids of the last changes with details/relations content
  public var previousMetaIds: [String] = []

  /// set of actions to apply
  public var content: [Anytype_Change.Content] = []

  /// snapshot - when not null, the Content will be ignored
  public var snapshot: Anytype_Change.Snapshot {
    get {return _snapshot ?? Anytype_Change.Snapshot()}
    set {_snapshot = newValue}
  }
  /// Returns true if `snapshot` has been explicitly set.
  public var hasSnapshot: Bool {return self._snapshot != nil}
  /// Clears the value of `snapshot`. Subsequent reads from it will return its default value.
  public mutating func clearSnapshot() {self._snapshot = nil}

  /// file keys related to changes content
  public var fileKeys: [Anytype_Change.FileKeys] = []

  /// creation timestamp
  public var timestamp: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Snapshot {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// logId -> lastChangeId
    public var logHeads: Dictionary<String,String> = [:]

    /// snapshot data
    public var data: Anytype_Model_SmartBlockSnapshotBase {
      get {return _data ?? Anytype_Model_SmartBlockSnapshotBase()}
      set {_data = newValue}
    }
    /// Returns true if `data` has been explicitly set.
    public var hasData: Bool {return self._data != nil}
    /// Clears the value of `data`. Subsequent reads from it will return its default value.
    public mutating func clearData() {self._data = nil}

    /// all file keys related to doc
    public var fileKeys: [Anytype_Change.FileKeys] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _data: Anytype_Model_SmartBlockSnapshotBase? = nil
  }

  public struct FileKeys {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var hash: String = String()

    public var keys: Dictionary<String,String> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Content {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var value: Anytype_Change.Content.OneOf_Value? = nil

    public var blockCreate: Anytype_Change.BlockCreate {
      get {
        if case .blockCreate(let v)? = value {return v}
        return Anytype_Change.BlockCreate()
      }
      set {value = .blockCreate(newValue)}
    }

    public var blockUpdate: Anytype_Change.BlockUpdate {
      get {
        if case .blockUpdate(let v)? = value {return v}
        return Anytype_Change.BlockUpdate()
      }
      set {value = .blockUpdate(newValue)}
    }

    public var blockRemove: Anytype_Change.BlockRemove {
      get {
        if case .blockRemove(let v)? = value {return v}
        return Anytype_Change.BlockRemove()
      }
      set {value = .blockRemove(newValue)}
    }

    public var blockMove: Anytype_Change.BlockMove {
      get {
        if case .blockMove(let v)? = value {return v}
        return Anytype_Change.BlockMove()
      }
      set {value = .blockMove(newValue)}
    }

    public var blockDuplicate: Anytype_Change.BlockDuplicate {
      get {
        if case .blockDuplicate(let v)? = value {return v}
        return Anytype_Change.BlockDuplicate()
      }
      set {value = .blockDuplicate(newValue)}
    }

    public var detailsSet: Anytype_Change.DetailsSet {
      get {
        if case .detailsSet(let v)? = value {return v}
        return Anytype_Change.DetailsSet()
      }
      set {value = .detailsSet(newValue)}
    }

    public var detailsUnset: Anytype_Change.DetailsUnset {
      get {
        if case .detailsUnset(let v)? = value {return v}
        return Anytype_Change.DetailsUnset()
      }
      set {value = .detailsUnset(newValue)}
    }

    public var relationAdd: Anytype_Change.RelationAdd {
      get {
        if case .relationAdd(let v)? = value {return v}
        return Anytype_Change.RelationAdd()
      }
      set {value = .relationAdd(newValue)}
    }

    public var relationRemove: Anytype_Change.RelationRemove {
      get {
        if case .relationRemove(let v)? = value {return v}
        return Anytype_Change.RelationRemove()
      }
      set {value = .relationRemove(newValue)}
    }

    public var relationUpdate: Anytype_Change.RelationUpdate {
      get {
        if case .relationUpdate(let v)? = value {return v}
        return Anytype_Change.RelationUpdate()
      }
      set {value = .relationUpdate(newValue)}
    }

    public var objectTypeAdd: Anytype_Change.ObjectTypeAdd {
      get {
        if case .objectTypeAdd(let v)? = value {return v}
        return Anytype_Change.ObjectTypeAdd()
      }
      set {value = .objectTypeAdd(newValue)}
    }

    public var objectTypeRemove: Anytype_Change.ObjectTypeRemove {
      get {
        if case .objectTypeRemove(let v)? = value {return v}
        return Anytype_Change.ObjectTypeRemove()
      }
      set {value = .objectTypeRemove(newValue)}
    }

    public var storeKeySet: Anytype_Change.StoreKeySet {
      get {
        if case .storeKeySet(let v)? = value {return v}
        return Anytype_Change.StoreKeySet()
      }
      set {value = .storeKeySet(newValue)}
    }

    public var storeKeyUnset: Anytype_Change.StoreKeyUnset {
      get {
        if case .storeKeyUnset(let v)? = value {return v}
        return Anytype_Change.StoreKeyUnset()
      }
      set {value = .storeKeyUnset(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Value: Equatable {
      case blockCreate(Anytype_Change.BlockCreate)
      case blockUpdate(Anytype_Change.BlockUpdate)
      case blockRemove(Anytype_Change.BlockRemove)
      case blockMove(Anytype_Change.BlockMove)
      case blockDuplicate(Anytype_Change.BlockDuplicate)
      case detailsSet(Anytype_Change.DetailsSet)
      case detailsUnset(Anytype_Change.DetailsUnset)
      case relationAdd(Anytype_Change.RelationAdd)
      case relationRemove(Anytype_Change.RelationRemove)
      case relationUpdate(Anytype_Change.RelationUpdate)
      case objectTypeAdd(Anytype_Change.ObjectTypeAdd)
      case objectTypeRemove(Anytype_Change.ObjectTypeRemove)
      case storeKeySet(Anytype_Change.StoreKeySet)
      case storeKeyUnset(Anytype_Change.StoreKeyUnset)

    #if !swift(>=4.1)
      public static func ==(lhs: Anytype_Change.Content.OneOf_Value, rhs: Anytype_Change.Content.OneOf_Value) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.blockCreate, .blockCreate): return {
          guard case .blockCreate(let l) = lhs, case .blockCreate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockUpdate, .blockUpdate): return {
          guard case .blockUpdate(let l) = lhs, case .blockUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockRemove, .blockRemove): return {
          guard case .blockRemove(let l) = lhs, case .blockRemove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockMove, .blockMove): return {
          guard case .blockMove(let l) = lhs, case .blockMove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDuplicate, .blockDuplicate): return {
          guard case .blockDuplicate(let l) = lhs, case .blockDuplicate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.detailsSet, .detailsSet): return {
          guard case .detailsSet(let l) = lhs, case .detailsSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.detailsUnset, .detailsUnset): return {
          guard case .detailsUnset(let l) = lhs, case .detailsUnset(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.relationAdd, .relationAdd): return {
          guard case .relationAdd(let l) = lhs, case .relationAdd(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.relationRemove, .relationRemove): return {
          guard case .relationRemove(let l) = lhs, case .relationRemove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.relationUpdate, .relationUpdate): return {
          guard case .relationUpdate(let l) = lhs, case .relationUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectTypeAdd, .objectTypeAdd): return {
          guard case .objectTypeAdd(let l) = lhs, case .objectTypeAdd(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectTypeRemove, .objectTypeRemove): return {
          guard case .objectTypeRemove(let l) = lhs, case .objectTypeRemove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.storeKeySet, .storeKeySet): return {
          guard case .storeKeySet(let l) = lhs, case .storeKeySet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.storeKeyUnset, .storeKeyUnset): return {
          guard case .storeKeyUnset(let l) = lhs, case .storeKeyUnset(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  public struct BlockCreate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var targetID: String = String()

    public var position: Anytype_Model_Block.Position = .none

    public var blocks: [Anytype_Model_Block] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BlockUpdate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var events: [Anytype_Event.Message] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BlockRemove {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var ids: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BlockMove {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var targetID: String = String()

    public var position: Anytype_Model_Block.Position = .none

    public var ids: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BlockDuplicate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var targetID: String = String()

    public var position: Anytype_Model_Block.Position = .none

    public var ids: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct DetailsSet {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var key: String = String()

    public var value: SwiftProtobuf.Google_Protobuf_Value {
      get {return _value ?? SwiftProtobuf.Google_Protobuf_Value()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    public var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    public mutating func clearValue() {self._value = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _value: SwiftProtobuf.Google_Protobuf_Value? = nil
  }

  public struct DetailsUnset {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var key: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct RelationAdd {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var relation: Anytype_Model_Relation {
      get {return _relation ?? Anytype_Model_Relation()}
      set {_relation = newValue}
    }
    /// Returns true if `relation` has been explicitly set.
    public var hasRelation: Bool {return self._relation != nil}
    /// Clears the value of `relation`. Subsequent reads from it will return its default value.
    public mutating func clearRelation() {self._relation = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _relation: Anytype_Model_Relation? = nil
  }

  public struct RelationUpdate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var key: String = String()

    public var value: Anytype_Change.RelationUpdate.OneOf_Value? = nil

    public var format: Anytype_Model_RelationFormat {
      get {
        if case .format(let v)? = value {return v}
        return .longtext
      }
      set {value = .format(newValue)}
    }

    public var name: String {
      get {
        if case .name(let v)? = value {return v}
        return String()
      }
      set {value = .name(newValue)}
    }

    public var defaultValue: SwiftProtobuf.Google_Protobuf_Value {
      get {
        if case .defaultValue(let v)? = value {return v}
        return SwiftProtobuf.Google_Protobuf_Value()
      }
      set {value = .defaultValue(newValue)}
    }

    public var objectTypes: Anytype_Change.RelationUpdate.ObjectTypes {
      get {
        if case .objectTypes(let v)? = value {return v}
        return Anytype_Change.RelationUpdate.ObjectTypes()
      }
      set {value = .objectTypes(newValue)}
    }

    public var multi: Bool {
      get {
        if case .multi(let v)? = value {return v}
        return false
      }
      set {value = .multi(newValue)}
    }

    public var selectDict: Anytype_Change.RelationUpdate.Dict {
      get {
        if case .selectDict(let v)? = value {return v}
        return Anytype_Change.RelationUpdate.Dict()
      }
      set {value = .selectDict(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Value: Equatable {
      case format(Anytype_Model_RelationFormat)
      case name(String)
      case defaultValue(SwiftProtobuf.Google_Protobuf_Value)
      case objectTypes(Anytype_Change.RelationUpdate.ObjectTypes)
      case multi(Bool)
      case selectDict(Anytype_Change.RelationUpdate.Dict)

    #if !swift(>=4.1)
      public static func ==(lhs: Anytype_Change.RelationUpdate.OneOf_Value, rhs: Anytype_Change.RelationUpdate.OneOf_Value) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.format, .format): return {
          guard case .format(let l) = lhs, case .format(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.name, .name): return {
          guard case .name(let l) = lhs, case .name(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.defaultValue, .defaultValue): return {
          guard case .defaultValue(let l) = lhs, case .defaultValue(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectTypes, .objectTypes): return {
          guard case .objectTypes(let l) = lhs, case .objectTypes(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.multi, .multi): return {
          guard case .multi(let l) = lhs, case .multi(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.selectDict, .selectDict): return {
          guard case .selectDict(let l) = lhs, case .selectDict(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public struct Dict {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var dict: [Anytype_Model_Relation.Option] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct ObjectTypes {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var objectTypes: [String] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public struct RelationRemove {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var key: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct ObjectTypeAdd {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var url: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct ObjectTypeRemove {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var url: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct StoreKeySet {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var path: [String] = []

    public var value: SwiftProtobuf.Google_Protobuf_Value {
      get {return _value ?? SwiftProtobuf.Google_Protobuf_Value()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    public var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    public mutating func clearValue() {self._value = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _value: SwiftProtobuf.Google_Protobuf_Value? = nil
  }

  public struct StoreKeyUnset {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var path: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _snapshot: Anytype_Change.Snapshot? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"

extension Anytype_Change: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Change"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "previous_ids"),
    2: .standard(proto: "last_snapshot_id"),
    5: .standard(proto: "previous_meta_ids"),
    3: .same(proto: "content"),
    4: .same(proto: "snapshot"),
    6: .same(proto: "fileKeys"),
    7: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.previousIds) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.lastSnapshotID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.content) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._snapshot) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.previousMetaIds) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.fileKeys) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.previousIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.previousIds, fieldNumber: 1)
    }
    if !self.lastSnapshotID.isEmpty {
      try visitor.visitSingularStringField(value: self.lastSnapshotID, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.content, fieldNumber: 3)
    }
    try { if let v = self._snapshot {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.previousMetaIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.previousMetaIds, fieldNumber: 5)
    }
    if !self.fileKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileKeys, fieldNumber: 6)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change, rhs: Anytype_Change) -> Bool {
    if lhs.previousIds != rhs.previousIds {return false}
    if lhs.lastSnapshotID != rhs.lastSnapshotID {return false}
    if lhs.previousMetaIds != rhs.previousMetaIds {return false}
    if lhs.content != rhs.content {return false}
    if lhs._snapshot != rhs._snapshot {return false}
    if lhs.fileKeys != rhs.fileKeys {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.Snapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".Snapshot"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "logHeads"),
    2: .same(proto: "data"),
    3: .same(proto: "fileKeys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.logHeads) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.fileKeys) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.logHeads.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.logHeads, fieldNumber: 1)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.fileKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileKeys, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.Snapshot, rhs: Anytype_Change.Snapshot) -> Bool {
    if lhs.logHeads != rhs.logHeads {return false}
    if lhs._data != rhs._data {return false}
    if lhs.fileKeys != rhs.fileKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.FileKeys: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".FileKeys"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "keys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.keys) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if !self.keys.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.keys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.FileKeys, rhs: Anytype_Change.FileKeys) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.Content: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".Content"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blockCreate"),
    2: .same(proto: "blockUpdate"),
    3: .same(proto: "blockRemove"),
    4: .same(proto: "blockMove"),
    5: .same(proto: "blockDuplicate"),
    100: .same(proto: "detailsSet"),
    101: .same(proto: "detailsUnset"),
    102: .same(proto: "relationAdd"),
    103: .same(proto: "relationRemove"),
    104: .same(proto: "relationUpdate"),
    105: .same(proto: "objectTypeAdd"),
    106: .same(proto: "objectTypeRemove"),
    107: .same(proto: "storeKeySet"),
    108: .same(proto: "storeKeyUnset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Anytype_Change.BlockCreate?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockCreate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockCreate(v)
        }
      }()
      case 2: try {
        var v: Anytype_Change.BlockUpdate?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockUpdate(v)
        }
      }()
      case 3: try {
        var v: Anytype_Change.BlockRemove?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockRemove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockRemove(v)
        }
      }()
      case 4: try {
        var v: Anytype_Change.BlockMove?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockMove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockMove(v)
        }
      }()
      case 5: try {
        var v: Anytype_Change.BlockDuplicate?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDuplicate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDuplicate(v)
        }
      }()
      case 100: try {
        var v: Anytype_Change.DetailsSet?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .detailsSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .detailsSet(v)
        }
      }()
      case 101: try {
        var v: Anytype_Change.DetailsUnset?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .detailsUnset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .detailsUnset(v)
        }
      }()
      case 102: try {
        var v: Anytype_Change.RelationAdd?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .relationAdd(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .relationAdd(v)
        }
      }()
      case 103: try {
        var v: Anytype_Change.RelationRemove?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .relationRemove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .relationRemove(v)
        }
      }()
      case 104: try {
        var v: Anytype_Change.RelationUpdate?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .relationUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .relationUpdate(v)
        }
      }()
      case 105: try {
        var v: Anytype_Change.ObjectTypeAdd?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .objectTypeAdd(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .objectTypeAdd(v)
        }
      }()
      case 106: try {
        var v: Anytype_Change.ObjectTypeRemove?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .objectTypeRemove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .objectTypeRemove(v)
        }
      }()
      case 107: try {
        var v: Anytype_Change.StoreKeySet?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .storeKeySet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .storeKeySet(v)
        }
      }()
      case 108: try {
        var v: Anytype_Change.StoreKeyUnset?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .storeKeyUnset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .storeKeyUnset(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .blockCreate?: try {
      guard case .blockCreate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .blockUpdate?: try {
      guard case .blockUpdate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .blockRemove?: try {
      guard case .blockRemove(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .blockMove?: try {
      guard case .blockMove(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .blockDuplicate?: try {
      guard case .blockDuplicate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .detailsSet?: try {
      guard case .detailsSet(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    }()
    case .detailsUnset?: try {
      guard case .detailsUnset(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
    }()
    case .relationAdd?: try {
      guard case .relationAdd(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
    }()
    case .relationRemove?: try {
      guard case .relationRemove(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
    }()
    case .relationUpdate?: try {
      guard case .relationUpdate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
    }()
    case .objectTypeAdd?: try {
      guard case .objectTypeAdd(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
    }()
    case .objectTypeRemove?: try {
      guard case .objectTypeRemove(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 106)
    }()
    case .storeKeySet?: try {
      guard case .storeKeySet(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 107)
    }()
    case .storeKeyUnset?: try {
      guard case .storeKeyUnset(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 108)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.Content, rhs: Anytype_Change.Content) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "targetId"),
    2: .same(proto: "position"),
    3: .same(proto: "blocks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.targetID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.position) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.blocks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 2)
    }
    if !self.blocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blocks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.BlockCreate, rhs: Anytype_Change.BlockCreate) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.blocks != rhs.blocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "events"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.BlockUpdate, rhs: Anytype_Change.BlockUpdate) -> Bool {
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.BlockRemove, rhs: Anytype_Change.BlockRemove) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockMove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockMove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "targetId"),
    2: .same(proto: "position"),
    3: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.targetID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.position) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 2)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.BlockMove, rhs: Anytype_Change.BlockMove) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockDuplicate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockDuplicate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "targetId"),
    2: .same(proto: "position"),
    3: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.targetID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.position) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 2)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.BlockDuplicate, rhs: Anytype_Change.BlockDuplicate) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.DetailsSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".DetailsSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.DetailsSet, rhs: Anytype_Change.DetailsSet) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.DetailsUnset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".DetailsUnset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.DetailsUnset, rhs: Anytype_Change.DetailsUnset) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.RelationAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".RelationAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "relation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._relation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._relation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.RelationAdd, rhs: Anytype_Change.RelationAdd) -> Bool {
    if lhs._relation != rhs._relation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.RelationUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".RelationUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "format"),
    3: .same(proto: "name"),
    4: .same(proto: "defaultValue"),
    5: .same(proto: "objectTypes"),
    6: .same(proto: "multi"),
    7: .same(proto: "selectDict"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try {
        var v: Anytype_Model_RelationFormat?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .format(v)
        }
      }()
      case 3: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .name(v)
        }
      }()
      case 4: try {
        var v: SwiftProtobuf.Google_Protobuf_Value?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .defaultValue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .defaultValue(v)
        }
      }()
      case 5: try {
        var v: Anytype_Change.RelationUpdate.ObjectTypes?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .objectTypes(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .objectTypes(v)
        }
      }()
      case 6: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .multi(v)
        }
      }()
      case 7: try {
        var v: Anytype_Change.RelationUpdate.Dict?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .selectDict(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .selectDict(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    switch self.value {
    case .format?: try {
      guard case .format(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }()
    case .name?: try {
      guard case .name(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case .defaultValue?: try {
      guard case .defaultValue(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .objectTypes?: try {
      guard case .objectTypes(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .multi?: try {
      guard case .multi(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }()
    case .selectDict?: try {
      guard case .selectDict(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.RelationUpdate, rhs: Anytype_Change.RelationUpdate) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.RelationUpdate.Dict: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.RelationUpdate.protoMessageName + ".Dict"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "dict"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.dict) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dict.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dict, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.RelationUpdate.Dict, rhs: Anytype_Change.RelationUpdate.Dict) -> Bool {
    if lhs.dict != rhs.dict {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.RelationUpdate.ObjectTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.RelationUpdate.protoMessageName + ".ObjectTypes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "objectTypes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.objectTypes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.objectTypes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.objectTypes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.RelationUpdate.ObjectTypes, rhs: Anytype_Change.RelationUpdate.ObjectTypes) -> Bool {
    if lhs.objectTypes != rhs.objectTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.RelationRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".RelationRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.RelationRemove, rhs: Anytype_Change.RelationRemove) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.ObjectTypeAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".ObjectTypeAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.ObjectTypeAdd, rhs: Anytype_Change.ObjectTypeAdd) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.ObjectTypeRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".ObjectTypeRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.ObjectTypeRemove, rhs: Anytype_Change.ObjectTypeRemove) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.StoreKeySet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".StoreKeySet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.path.isEmpty {
      try visitor.visitRepeatedStringField(value: self.path, fieldNumber: 1)
    }
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.StoreKeySet, rhs: Anytype_Change.StoreKeySet) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.StoreKeyUnset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".StoreKeyUnset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.path) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitRepeatedStringField(value: self.path, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.StoreKeyUnset, rhs: Anytype_Change.StoreKeyUnset) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
